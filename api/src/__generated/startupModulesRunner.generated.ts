/**
 * ********************* THIS IS A GENERATED FILE *****************************
 * ********************* DO NOT MODIFY OR FORMAT MANUALLY *********************
 *
 * This file is automatically generated with the module:
 * genStartupModuleRunner
 *
 * Generated hash in hex for code after this section is:
 * sha256(acdbc9baf6f98b2b96637d3ea3d4400a3a29ffb593bccaec875372b3ee8a3511)
 */
/* eslint-disable perfectionist/sort-imports */
/* eslint-disable perfectionist/sort-exports */
import { logger } from "../logging/index.js";
import { unknownCatchToError } from "../utils/index.js";
import { st } from "./startupModulesBarrelFile.generated.js";

/**
 * Runner function that runs all the startup modules concurrently, and stops the
 * process if any of them fails.
 */
export async function startupModuleRunner() {
  try {
    logger.info(startupModuleRunner.name, "Running (1) Startup Modules");

    await Promise.all([logBeforeRun(st.telegramSetupTelegramBots)()]);
  } catch (e) {
    const error = unknownCatchToError(e);

    logger.error(
      startupModuleRunner.name,
      "Failed while running Startup Module",
      error,
    );

    // Stop the entire process as this should not continue unless all startup
    // modules completed successfully.
    process.exit(1);
  }
}

const logBeforeRun = (fn: () => any) =>
  async function () {
    logger.verbose(`${startupModuleRunner.name}:${fn.name}`, "Start");
    await fn();
    logger.verbose(`${startupModuleRunner.name}:${fn.name}`, "Completed");
  };
