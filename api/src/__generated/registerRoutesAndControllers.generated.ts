/**
 * ********************* THIS IS A GENERATED FILE *****************************
 * ********************* DO NOT MODIFY OR FORMAT MANUALLY *********************
 *
 * This file is automatically generated with the module:
 * genHttpRoutesTable
 *
 * Generated hash in hex for code after this section is:
 * sha256(6dd67bc85e1f51f74aa197087d8f78bb1a17f690ad53e325bc9a07f1d92e0e3d)
 */
import { Router } from "express";
import * as c from "./httpControllerBarrelFile.generated.js";
/**
 * A route tables sort of file, where all HTTP API routes are defined here along
 * with the controllers/route-handlers that will be used to handle requests for
 * the specified route.
 *
 * ### Why do definitions here look so weird?
 * All HTTP route handlers / controllers are defined using `httpController`
 * which allows them to define the (HTTP method, API paths, Route hander) all in
 * the same file.
 *
 * The HTTP methods and API paths are then redefined here again, together with
 * the route handler used to handle them for clarity sake.
 *
 * By doing this, the HTTP methods and API paths are available for developers to
 * see in both the controller file and this main routes table file, which makes
 * it easy to see in both places without having to navigate code / jump around.
 *
 * The definitions are also guaranteed to be kept in sync using the `satisfies`
 * type checking operator, since both the HTTP methods and API paths are defined
 * as type literals!
 */
export function registerRoutesAndControllers() {
  const r = Router();

  // GET /api/
  r["get" satisfies typeof c.healthCheck.method](
    "/" satisfies typeof c.healthCheck.path,
    c.healthCheck.routeHandler,
  );

  // POST /api/v1/blog/subscribe
  r["post" satisfies typeof c.blogBlogNewSubscriber.method](
    ("/v1" satisfies typeof c.blogBlogNewSubscriber.version) +
      ("/blog/subscribe" satisfies typeof c.blogBlogNewSubscriber.path),
    c.blogBlogNewSubscriber.routeHandler,
  );

  // POST /api/v1/bucketlist
  r["post" satisfies typeof c.bucketlistCreateBucketlist.method](
    ("/v1" satisfies typeof c.bucketlistCreateBucketlist.version) +
      ("/bucketlist" satisfies typeof c.bucketlistCreateBucketlist.path),
    c.bucketlistCreateBucketlist.routeHandler,
  );

  // GET /api/v1/bucketlist/:bucketlistID
  r["get" satisfies typeof c.bucketlistGetBucketlist.method](
    ("/v1" satisfies typeof c.bucketlistGetBucketlist.version) +
      ("/bucketlist/:bucketlistID" satisfies typeof c.bucketlistGetBucketlist.path),
    c.bucketlistGetBucketlist.routeHandler,
  );

  // POST /api/v1/leetcode/ques
  r["post" satisfies typeof c.leetcodeCreateLeetcodeQues.method](
    ("/v1" satisfies typeof c.leetcodeCreateLeetcodeQues.version) +
      ("/leetcode/ques" satisfies typeof c.leetcodeCreateLeetcodeQues.path),
    c.leetcodeCreateLeetcodeQues.routeHandler,
  );

  // GET /api/v1/leetcode/ques/:leetcodeQuesID
  r["get" satisfies typeof c.leetcodeGetLeetcodeQues.method](
    ("/v1" satisfies typeof c.leetcodeGetLeetcodeQues.version) +
      ("/leetcode/ques/:leetcodeQuesID" satisfies typeof c.leetcodeGetLeetcodeQues.path),
    c.leetcodeGetLeetcodeQues.routeHandler,
  );

  // GET /api/version
  r["get" satisfies typeof c.version.method](
    "/version" satisfies typeof c.version.path,
    c.version.routeHandler,
  );

  return r;
}
