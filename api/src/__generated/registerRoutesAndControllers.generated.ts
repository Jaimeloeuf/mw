/**
 * ********************* THIS IS A GENERATED FILE *****************************
 * ********************* DO NOT MODIFY OR FORMAT MANUALLY *********************
 *
 * This file is automatically generated with the module:
 * genHttpRoutesTable
 *
 * Generated hash in hex for code after this section is:
 * sha256<e6e4ff7b05e0152ddc5e03ef42c12c8369f0fd59e98e70ae9ef99a58364cef50>
 */
import type { Express } from "express";
import { healthCheck } from "../controllers/healthCheck.js";
import { blogNewSubscriberController } from "../controllers/blog/blogNewSubscriberController.js";
import { version } from "../controllers/version.js";

/**
 * A route tables sort of file, where all HTTP API routes are defined here along
 * with the controllers/route-handlers that will be used to handle requests for
 * the specified route.
 *
 * ### Why do definitions here look so weird?
 * All HTTP route handlers / controllers are defined using `httpController`
 * which allows them to define the (HTTP method, API paths, Route hander) all in
 * the same file.
 *
 * The HTTP methods and API paths are then redefined here again, together with
 * the route handler used to handle them for clarity sake.
 *
 * By doing this, the HTTP methods and API paths are available for developers to
 * see in both the controller file and this main routes table file, which makes
 * it easy to see in both places without having to navigate code / jump around.
 *
 * The definitions are also guaranteed to be kept in sync using the `satisfies`
 * type checking operator, since both the HTTP methods and API paths are defined
 * as type literals!
 */
export function registerRoutesAndControllers(app: Express) {
  app["get" satisfies typeof healthCheck.method](
    "/" satisfies typeof healthCheck.path,
    healthCheck.routeHandler,
  );
  app["post" satisfies typeof blogNewSubscriberController.method](
    "/v1/blog/subscribe" satisfies typeof blogNewSubscriberController.path,
    blogNewSubscriberController.routeHandler,
  );
  app["get" satisfies typeof version.method](
    "/version" satisfies typeof version.path,
    version.routeHandler,
  );
}
