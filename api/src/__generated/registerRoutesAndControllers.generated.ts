/**
 * ********************* THIS IS A GENERATED FILE *****************************
 * ********************* DO NOT MODIFY OR FORMAT MANUALLY *********************
 *
 * This file is automatically generated with the module:
 * genHttpRoutesTable
 *
 * Generated hash in hex for code after this section is:
 * sha256<822b9845f5fb03d1d4bac4ec7498b514a0146bca367b411bfdfbb28276514ed7>
 */
import { Router } from "express";
import * as c from "./httpControllerBarrelFile.generated.js";
/**
 * A route tables sort of file, where all HTTP API routes are defined here along
 * with the controllers/route-handlers that will be used to handle requests for
 * the specified route.
 *
 * ### Why do definitions here look so weird?
 * All HTTP route handlers / controllers are defined using `httpController`
 * which allows them to define the (HTTP method, API paths, Route hander) all in
 * the same file.
 *
 * The HTTP methods and API paths are then redefined here again, together with
 * the route handler used to handle them for clarity sake.
 *
 * By doing this, the HTTP methods and API paths are available for developers to
 * see in both the controller file and this main routes table file, which makes
 * it easy to see in both places without having to navigate code / jump around.
 *
 * The definitions are also guaranteed to be kept in sync using the `satisfies`
 * type checking operator, since both the HTTP methods and API paths are defined
 * as type literals!
 */
export function registerRoutesAndControllers() {
  const r = Router();

  r["get" satisfies typeof c.healthCheck.method](
    "/" satisfies typeof c.healthCheck.path,
    c.healthCheck.routeHandler,
  );
  r["post" satisfies typeof c.blogNewSubscriberController.method](
    ("/v1" satisfies typeof c.blogNewSubscriberController.version) +
      ("/blog/subscribe" satisfies typeof c.blogNewSubscriberController.path),
    c.blogNewSubscriberController.routeHandler,
  );
  r["post" satisfies typeof c.createBucketlistController.method](
    ("/v1" satisfies typeof c.createBucketlistController.version) +
      ("/bucketlist" satisfies typeof c.createBucketlistController.path),
    c.createBucketlistController.routeHandler,
  );
  r["get" satisfies typeof c.getBucketlistController.method](
    ("/v1" satisfies typeof c.getBucketlistController.version) +
      ("/bucketlist/:bucketlistID" satisfies typeof c.getBucketlistController.path),
    c.getBucketlistController.routeHandler,
  );
  r["get" satisfies typeof c.version.method](
    "/version" satisfies typeof c.version.path,
    c.version.routeHandler,
  );

  return r;
}
