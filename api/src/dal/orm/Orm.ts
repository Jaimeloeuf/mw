import { UnimplementedException } from "../../exceptions/index.js";

type EntManagedData = {
  /**
   * ID generated by the framework.
   */
  id: string;

  /**
   * Timestamp managed by the framework.
   */
  createdAt: Date;

  /**
   * Timestamp managed by the framework.
   */
  updatedAt: Date;
};

/**
 * Base abstract Entity class for all Ents to extend/implement
 */
export abstract class BaseEnt<DataType extends Record<string, unknown>> {
  /**
   * The Ent's data
   */
  abstract data: EntManagedData & DataType;

  get id(): string {
    return this.data.id;
  }

  /**
   * Implement this to provide a consistent way for sending the data over the
   * network using JSON. This also means that all data in an Ent should use
   * primitive types that are JSON serializable.
   */
  abstract jsonSerialise(): string;

  /**
   * Recommended to use `zod` instead of parsing with `JSON.parse`.
   */
  static jsonParse(jsonString: string): unknown {
    throw new UnimplementedException(
      `jsonParse not implemented! Cannot parse: ${jsonString}`,
    );
  }
}

/**
 * Operators to implement basic CRUD + Upsert feature set for a given Ent.
 */
export interface EntCrudOperator<Ent extends BaseEnt<any>> {
  /**
   * Override and implement this
   */
  create(data: Omit<Ent["data"], keyof EntManagedData>): Promise<Ent>;

  /**
   * Override and implement this
   */
  get(id: string): Promise<Ent>;

  /**
   * Override and implement this
   */
  update(ent: Ent): Promise<void>;

  /**
   * Override and implement this
   */
  delete(id: string): Promise<void>;
}

type EntClass<Ent extends BaseEnt<any>> = new (...args: any) => Ent;

/**
 * Operators to implement basic CRUD + Upsert feature set for a given Ent.
 */
export interface EntCrudOperatorDefinition<Ent extends BaseEnt<any>> {
  create(ent: Ent): Promise<void>;
  get(id: string): Promise<Ent>;
  update(ent: Ent): Promise<void>;
  delete(id: string): Promise<void>;
}

export function defineEntCrudOperator<
  EntInstance extends BaseEnt<any>,
  Ent extends EntClass<EntInstance>,
>(
  entClass: Ent,
  entCrudOperatorDefinition: EntCrudOperatorDefinition<EntInstance>,
): EntCrudOperator<EntInstance> {
  return {
    get: entCrudOperatorDefinition.get,
    update: entCrudOperatorDefinition.update,
    delete: entCrudOperatorDefinition.delete,

    async create(data: Omit<EntInstance["data"], keyof EntManagedData>) {
      const now = new Date();
      const ent = new entClass({
        id: crypto.randomUUID(),
        createdAt: now,
        updatedAt: now,
        ...data,
      });
      await entCrudOperatorDefinition.create(ent);
      return ent;
    },
  };
}
