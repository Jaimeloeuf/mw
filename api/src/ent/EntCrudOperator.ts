import type { BaseEnt } from "./BaseEnt.js";
import type { EntManagedData } from "./EntManagedData.js";

/**
 * These Operators are used for basic CRUD actions for a given Ent type.
 *
 * Note that `Upsert` is not supported, since new EntIDs are created in the
 * Ent framework logic and never on the client/product code, there is no way an
 * Ent can exist for upsert operation.
 */
export interface EntCrudOperator<Ent extends BaseEnt> {
  /**
   * Create a new Ent and save it to storage layer before getting it back.
   *
   * Note that the fields in `EntManagedData`, i.e. `id`, `createdAt`, etc ...
   * are auto generated by the framework and not controlled by the user.
   */
  create(data: Omit<Ent["data"], keyof EntManagedData>): Promise<Ent>;

  /**
   * Get a single Ent from storage layer using the given ID.
   */
  get(id: string): Promise<Ent>;

  /**
   * Get many Ents from storage layer using the given IDs.
   */
  getMany(ids: $NonEmptyArray<string>): Promise<Array<Ent>>;

  /**
   * Update a single Ent in storage layer.
   *
   * Expected workflow is where users mutate the data on the Ent, before calling
   * this `update` method with the Ent to save the changes to storage layer.
   */
  update(ent: Ent): Promise<void>;

  /**
   * Delete a single Ent from storage layer.
   */
  delete(id: string): Promise<void>;
}
